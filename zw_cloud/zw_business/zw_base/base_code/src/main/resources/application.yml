server:
  port: 8081
  servlet:
    context-path: /base

spring:
  # cloud
  cloud:
    nacos:
      discovery:
        server-addr: 127.0.0.1:8848
      config:
        group: BUSINESS_GROUP
    alibaba:
      seata:
        tx-service-group: ${spring.application.name}_tx_group
    # Sharding 数据库链接
    #sharding-jdbc显示最终SQL
  shardingsphere:
    # 数据源配置
    datasource:
      names: master
      master:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://127.0.0.1/zw_cloud_base?useUnicode=true&serverTimezone=GMT%2B8&characterEncoding=utf-8
        username: root
        password: root

    # sharding 分片设置
    sharding:
      # 分库策略
      #      default-database-strategy:
      #        inline:
      #          sharding-column: id
      #          algorithm-expression: ds$->{id % 2}
      # 分表策略
      tables:
        # logic_表 String 分片逻辑表名称
        sys_user:
          actual-data-nodes: sys_user$->{0..1}
          table-strategy:
            # standard 用于单分片键的标准分片场景
            standard:
              # 分片列名称
              shardingColumn: id
              preciseAlgorithmClassName: com.base.api.config.DataTypeRoutingAlgorithm


# ------

# standard.precise-algorithm 标准策略下分片算法包含2个 precise + range，range是可选的，但是如果使用 range 就必须同 precise 配套一起使用
# 买precise赠送 range，可以选择不要赠品，但是你不能不买还想白嫖赠品
#  sharding.jdbc.config.sharding.default-database-strategy.standard.precise-algorithm-class-name=ai.yunxi.sharding.config.PreciseShardingDBAlgorithm
#  sharding.jdbc.config.sharding.default-database-strategy.standard.range-algorithm-class-name=ai.yunxi.sharding.config.RangeShardingDBAlgorithm
#
#  # 设置绑定表
#  sharding.jdbc.config.sharding.binding-tables=t_order,t_order_item
#
#  # t_order分表配置
#  # 如果分片键相同，可以直接在后面凭拼接 例如 ：ds$->{0..1}.t_order$->{0..1},ds$->{0..1}.t_order_item$->{0..1}
#  sharding.jdbc.config.sharding.tables.t_order.actual-data-nodes=ds$->{0..1}.t_order$->{0..1}
#  sharding.jdbc.config.sharding.tables.t_order.table-strategy.standard.sharding-column=order_id
#  sharding.jdbc.config.sharding.tables.t_order.table-strategy.standard.precise-algorithm-class-name=ai.yunxi.sharding.config.PreciseShardingDBAlgorithm
#  sharding.jdbc.config.sharding.tables.t_order.table-strategy.standard.range-algorithm-class-name=ai.yunxi.sharding.config.RangeShardingDBAlgorithm
#
#  # t_order_item分表配置
#  sharding.jdbc.config.sharding.tables.t_order_item.actual-data-nodes=ds$->{0..1}.t_order_item$->{0..1}
#  sharding.jdbc.config.sharding.tables.t_order_item.table-strategy.standard.sharding-column=order_id
#  sharding.jdbc.config.sharding.tables.t_order_item.table-strategy.standard.precise-algorithm-class-name=ai.yunxi.sharding.config.PreciseShardingDBAlgorithm
#  sharding.jdbc.config.sharding.tables.t_order_item.table-strategy.standard.range-algorithm-class-name=ai.yunxi.sharding.config.RangeShardingDBAlgorithm

  # -------------

  # sharding-jdbc分片配置
  # #################### 水平拆分的数据库（表） 配置分库 + 分表策略 行表达式分片策略 # start

  # 分库策略
  #  sharding.jdbc.config.sharding.default-database-strategy.inline.sharding-column=id
  #  sharding.jdbc.config.sharding.default-database-strategy.inline.algorithm-expression=ds$->{id % 2}
  #
  #  # 分表策略 其中user为逻辑表 分表主要取决于age行
  #  sharding.jdbc.config.sharding.tables.user.table-strategy.inline.sharding-column=age
  #  sharding.jdbc.config.sharding.tables.user.actual-data-nodes=ds$->{0..1}.user_$->{0..1}
  #  # 分片算法表达式
  #  sharding.jdbc.config.sharding.tables.user.table-strategy.inline.algorithm-expression=user_$->{age % 2}
  #
  #  # 主键 UUID 18位数 如果是分布式还要进行一个设置 防止主键重复
  #  # sharding.jdbc.config.sharding.tables.user.key-generator-column-name=id
  #
  #  # 打印执行的数据库以及语句
  #  sharding.jdbc.config.props..sql.show=true
  #  spring.main.allow-bean-definition-overriding=true

  # #################### 水平拆分的数据库（表） 配置分库 + 分表策略 行表达式分片策略 # end

  #配置采样百分比,开发环境可以设置为1，表示全部，生产就用默认（0.1）
  sleuth:
    sampler:
      probability: 1
# mybatis-plus
mybatis-plus:
  mapper-locations: classpath*:/mapper/*.xml
  type-aliases-package: com.base.common.model

# Logger Config
logging:
  config: classpath:logback-spring.xml
  level:
    com.baomidou.mybatisplus.samples: error
    # zipkin 数据源
  #    stream:
  #      binders:
  #        zipkin:
  #          # 当项目同时使用kafka和rabbit时，需要指定
  #          type: kafka
  #

#  zipkin:
#    sender:
#      type: kafka
#    #base-url: http://localhost:9411/
#    service:
#      name: @project.name@
#  kafka:
#    bootstrap-servers: 127.0.0.1:9092

setting:
  api:
    prefix: base

#  添加配置，配置暴露 endpoints：
management:
  endpoints:
    web:
      exposure:
        # include: "*" 表示暴露所有 endpoints 出去，默认是“health”，“info”
        include: "*"

